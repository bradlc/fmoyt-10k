{"version":3,"sources":["main.js","_inert.js","_idb_keyval.js"],"names":["formatDate","date","months","document","year","substring","month","_focusableElementsString","parseInt","day","once","fn","context","result","apply","this","arguments","debounce","func","wait","immediate","timeout","args","later","_inertManager","inertManager","callNow","_rootElement","setTimeout","get","_managedNodes","xhr","window","XMLHttpRequest","ActiveXObject","open","url","onreadystatechange","readyState","status","success","responseText","setRequestHeader","send","flip","e","preventDefault","poster","querySelector","modalActive","image","src","currentSrc","style","backgroundImage","_observer","add","fromRect","getBoundingClientRect","toRect","scale","width","left","top","transform","inertNode","classList","activeElement","contains","startNode","addEventListener","node","undefined","remove","inert","focusedItem","focus","borderRadius","opacity","href","target","closest","data","movieData","JSON","parse","textContent","title","overview","release_date","youtube_id","setAttribute","requestAnimationFrame","_visitNode","createGridItem","id","releaseDate","li","createElement","a","div","img","alt","h3","time","_unmanageNode","appendChild","getPerRow","i","items","length","records","newTop","getNodeIndex","previousElementSibling","composedTreeWalk","callback","shadowRootAncestor","nodeType","Node","ELEMENT_NODE","element","shadowRoot","webkitShadowRoot","localName","content","distributedNodes","getDistributedNodes","slot","assignedNodes","flatten","child","firstChild","nextSibling","addInertStyle","join","InertRoot","rootElement","Set","_makeSubtreeUnfocusable","MutationObserver","_onMutation","bind","observe","attributes","childList","subtree","disconnect","removeAttribute","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","value","root","DOCUMENT_FRAGMENT_NODE","parentNode","blur","hasAttribute","_adoptInertRoot","matches","_manageNode","register","deregister","delete","inertSubroot","getInertRoot","setInert","_step2","managedNodes","_iteratorNormalCompletion2","_iterator2","savedInertNode","self","_step3","_iteratorNormalCompletion3","_iterator3","record","type","_step4","Array","from","addedNodes","_iteratorNormalCompletion4","_iterator4","_step5","removedNodes","_iteratorNormalCompletion5","_iterator5","_unmanageSubtree","attributeName","_step6","_iteratorNormalCompletion6","_iterator6","managedNode","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_destroyed","ensureUntabbable","_throwIfDestroyed","hasSavedTabIndex","savedTabIndex","destroyed","Error","tabIndex","_savedTabIndex","size","destructor","InertManager","_document","Map","_watchForInert","head","body","documentElement","_onDocumentLoaded","has","set","parent","addInertRoot","removeInertRoot","inertElements","querySelectorAll","_step7","_iteratorNormalCompletion7","_iterator7","inertElement","_step8","_iteratorNormalCompletion8","_iterator8","_step9","_iteratorNormalCompletion9","_iterator9","unshift","_step10","_iteratorNormalCompletion10","_iterator10","defineProperty","Element","prototype","getDB","db","Promise","resolve","reject","openreq","indexedDB","onerror","error","onupgradeneeded","createObjectStore","onsuccess","withStore","then","transaction","oncomplete","objectStore","idbKeyval","key","req","store","put","clear","keys","openKeyCursor","openCursor","call","push","continue","module","exports","activeItem","activeMovie","main","movieContainer","movieContainerBg","movie","movieInner","movieFront","movieBack","movieBackPoster","movieTitle","movieOverview","movieReleaseDate","movieLink","grid","saveBtn","saveBtnText","saveBtnIcon","savedCount","UP","RIGHT","DOWN","LEFT","ESC","item","loadMore","link","currentPage","match","movies","els","createDocumentFragment","init","perRow","which","activeEl","currentIndex","newIndex","saved","save","innerHTML","tablist","tabs","panels","getAttribute","ul"],"mappings":"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","file":"main.js","sourcesContent":["/* global imgix */\n\nimport './_inert.js';\nimport './_idb_keyval.js';\n\nlet modalActive = false;\nlet activeItem = null;\nlet activeMovie = null;\n\nconst main = document.querySelector('.js-main');\nconst movieContainer = document.querySelector('.js-movie-container');\nconst movieContainerBg = document.querySelector('.js-movie-container-bg');\nconst movie = document.querySelector('.js-movie');\nconst movieInner = document.querySelector('.js-movie-inner');\nconst movieFront = document.querySelector('.js-movie-front');\nconst movieBack = document.querySelector('.js-movie-back');\nconst movieBackPoster = document.querySelector('.js-movie-back-poster');\n\nconst movieTitle = document.querySelector('.js-movie-title');\nconst movieOverview = document.querySelector('.js-movie-overview');\nconst movieReleaseDate = document.querySelector('.js-movie-release-date');\nconst movieLink = document.querySelector('.js-movie-link');\n\nconst grid = document.querySelector('.js-grid');\nlet items = document.querySelectorAll('.js-grid-item');\n\nconst saveBtn = document.querySelector('.js-save');\nconst saveBtnText = document.querySelector('.js-save .btn__text');\nconst saveBtnIcon = document.querySelector('.js-save .btn__icon');\nlet savedCount = 0;\n\nlet focusedItem = null;\n\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\nconst LEFT = 37;\nconst ESC = 27;\n\nif (!movieContainer.classList.contains('movie-container--single')) {\n  movieContainer.inert = true;\n}\n\nfunction formatDate(date) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const year = date.substring(0, 4);\n  let month = date.substring(5, 7);\n  month = (month.substring(0, 1) === '0') ? month.substring(1) : month;\n  month = months[parseInt(month, 10) - 1];\n  let day = date.substring(8, 10);\n  day = (day.substring(0, 1) === '0') ? day.substring(1) : day;\n  return `${day} ${month} ${year}`;\n}\n\n/* eslint-disable */\nfunction once(fn, context) {\n  let result;\n\n  return function () {\n    if (fn) {\n      result = fn.apply(context || this, arguments);\n      fn = null;\n    }\n\n    return result;\n  };\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout;\n  return function() {\n    const context = this;\n    const args = arguments;\n    const later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\nfunction get(url, success) {\n  var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');\n  xhr.open('GET', url);\n\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState > 3 && xhr.status === 200) success(xhr.responseText);\n  };\n\n  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  xhr.send();\n\n  return xhr;\n}\n/* eslint-enable */\n\nfunction flip(e) {\n  if (typeof e !== 'undefined') e.preventDefault();\n\n  const poster = this.querySelector('.js-grid-poster');\n\n  // update poster\n  if (!modalActive) {\n    const image = poster.querySelector('img');\n    const src = typeof image.currentSrc !== 'undefined' ? image.currentSrc : image.src;\n    movieFront.style.backgroundImage = `url('${src}')`;\n    movieBackPoster.style.backgroundImage = `url('${src}')`;\n\n    movieContainer.classList.add('movie-container--visible');\n  }\n\n  const fromRect = movie.getBoundingClientRect();\n  const toRect = poster.getBoundingClientRect();\n\n  const scale = 1 / (fromRect.width / toRect.width);\n  const left = toRect.left - fromRect.left;\n  const top = toRect.top - fromRect.top;\n\n  movie.style.transform = `translate(${left}px, ${top}px)`;\n  movieInner.style.transform = `scale(${scale})`;\n\n  // border radius\n  if (!modalActive) {\n    const borderRadius = 3 * (1 / scale);\n    movieFront.style.borderRadius = `${borderRadius}px`;\n    movieBack.style.borderRadius = `${borderRadius}px`;\n\n    poster.style.opacity = 0;\n\n    movieContainer.inert = false;\n    main.inert = true;\n\n    const href = e.target.closest('a').href;\n\n    get(href, data => {\n      const movieData = JSON.parse(data);\n      movieTitle.textContent = movieData.title;\n      movieOverview.textContent = movieData.overview;\n      movieReleaseDate.textContent = formatDate(movieData.release_date);\n      movieLink.href = `https://www.youtube.com/watch?v=${movieData.youtube_id}`;\n\n      activeMovie = {\n        title: movieData.title,\n        overview: movieData.overview,\n        poster: movieData.poster,\n        release_date: movieData.release_date,\n        id: movieData.youtube_id,\n      };\n\n      saveBtn.setAttribute('data-title', movieData.title);\n      saveBtn.setAttribute('data-id', movieData.youtube_id);\n    });\n\n    window.requestAnimationFrame(() => {\n      movieContainer.classList.add('movie-container--animate');\n      movieInner.style.transform = 'none';\n      movie.style.transform = 'none';\n      movieContainerBg.style.opacity = 1;\n      movie.classList.add('movie--flipped');\n    });\n  } else {\n    movie.classList.remove('movie--flipped');\n    movieContainerBg.style.opacity = 0;\n    movie.addEventListener('transitionend', once(() => {\n      poster.style.opacity = 1;\n      movieContainer.classList.remove('movie-container--animate');\n      movieContainer.classList.remove('movie-container--visible');\n      movie.style.transform = 'none';\n      movieInner.style.transform = 'none';\n\n      movieContainer.inert = true;\n      main.inert = false;\n\n      if (focusedItem) {\n        focusedItem.focus();\n      }\n    }));\n  }\n\n  modalActive = !modalActive;\n  activeItem = this;\n}\n\nif (grid) {\n  window.addEventListener('click', e => {\n    const item = e.target.closest('.js-grid-item');\n    if (item) {\n      e.preventDefault();\n      flip.bind(item, e)();\n    }\n  });\n\n  grid.addEventListener('focus', e => {\n    focusedItem = e.target.closest('.js-grid-item');\n  }, true);\n}\n\nmovieContainerBg.addEventListener('click', () => {\n  flip.bind(activeItem)();\n});\n\n/**\n * Load more\n */\nconst loadMore = document.querySelector('.js-load-more');\n\nfunction createGridItem(id, poster, title, releaseDate) {\n  const li = document.createElement('li');\n  li.classList.add('grid-item');\n\n  const a = document.createElement('a');\n  a.href = `/${id}`;\n  a.classList.add('js-grid-item');\n\n  const div = document.createElement('div');\n  div.classList.add('grid-item__poster');\n  div.classList.add('js-grid-poster');\n\n  const img = document.createElement('img');\n  img.setAttribute('ix-src', `https://fmoyt-10k.imgix.net${poster}?w=320&amp;h=480&amp;fit=crop&amp;auto=format,compress`);\n  img.alt = '';\n  img.setAttribute('sizes', '170px');\n  img.classList.add('lazyload');\n\n  const h3 = document.createElement('h3');\n  h3.textContent = title;\n\n  const year = releaseDate.substring(0, 4);\n  const time = document.createElement('time');\n  time.setAttribute('datetime', year);\n  time.classList.add('mono');\n  time.textContent = year;\n\n  div.appendChild(img);\n  a.appendChild(div);\n  a.appendChild(h3);\n  a.appendChild(time);\n  li.appendChild(a);\n\n  return li;\n}\n\nif (loadMore) {\n  loadMore.addEventListener('click', e => {\n    e.preventDefault();\n\n    const link = e.target.closest('a');\n    const href = link.href;\n\n    let currentPage = href.match(/[0-9]+$/);\n    currentPage = parseInt(currentPage[0], 10);\n    link.href = `/page/${currentPage + 1}`;\n\n    link.setAttribute('disabled', 'disabled');\n\n    get(href, data => {\n      const movies = JSON.parse(data);\n      const els = document.createDocumentFragment();\n      for (let i = 0; i < movies.length; i++) {\n        const li = createGridItem(movies[i].youtube_id, movies[i].poster, movies[i].title, movies[i].release_date);\n        els.appendChild(li);\n      }\n\n      grid.appendChild(els);\n      link.removeAttribute('disabled');\n\n      requestAnimationFrame(() => {\n        items = document.querySelectorAll('.js-grid-item');\n        imgix.init({\n          srcAttribute: 'data-src',\n          srcsetAttribute: 'data-srcset',\n          sizesAttribute: 'data-sizes',\n        });\n      });\n    });\n  });\n}\n\n/**\n * Keyboard nav\n */\nfunction getPerRow() {\n  let top = null;\n  let i;\n  for (i = 0; i < items.length; i++) {\n    const newTop = items[i].getBoundingClientRect().top;\n    if (top !== null && newTop !== top) {\n      break;\n    }\n    top = newTop;\n  }\n  return i;\n}\nlet perRow = getPerRow();\nwindow.addEventListener('resize', debounce(() => {\n  perRow = getPerRow();\n}, 250));\n\ndocument.addEventListener('keydown', e => {\n  if (e.which !== UP && e.which !== RIGHT && e.which !== DOWN && e.which !== LEFT) return;\n  const activeEl = document.activeElement;\n  if (!activeEl.closest('.grid-item')) {\n    items[0].focus();\n    return;\n  }\n  const currentIndex = getNodeIndex(activeEl.closest('.grid-item'));\n  let newIndex;\n  if (e.which === LEFT) {\n    newIndex = currentIndex - 1;\n  }\n  if (e.which === RIGHT) {\n    newIndex = currentIndex + 1;\n  }\n  if (e.which === DOWN) {\n    newIndex = currentIndex + perRow;\n  }\n  if (e.which === UP) {\n    newIndex = currentIndex - perRow;\n  }\n  if (newIndex >= 0 && newIndex < items.length) {\n    items[newIndex].focus();\n  }\n});\n\ndocument.addEventListener('keydown', e => {\n  if (e.which === ESC && modalActive) {\n    flip.bind(activeItem)();\n  }\n});\n\nfunction getNodeIndex(node) {\n  for (var i = 0; node = node.previousElementSibling; i++);\n  return i;\n}\n\n\n/**\n * Save\n */\nsaveBtn.addEventListener('click', e => {\n  const btn = e.target.closest('.js-save');\n  idbKeyval.get('fmoyt-saved').then(saved => {\n    let save;\n    if (typeof saved === 'undefined') {\n      save = [];\n    } else {\n      save = saved.slice(0);\n    }\n    save.push(activeMovie);\n    idbKeyval.set('fmoyt-saved', save).then(_ => console.log('saved'));\n\n    saveBtnText.textContent = 'Saved';\n    saveBtnIcon.innerHTML = `<svg viewBox=\"0 0 24 24\"><path d=\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\"/></svg>`;\n  });\n});\n\n\nconst header = document.querySelector('.js-header');\nconst tablist = document.querySelector('.js-tablist');\n\nidbKeyval.get('fmoyt-saved').then(saved => {\n  if (typeof saved === 'undefined') {\n    return;\n  }\n  savedCount = saved.length;\n\n  tablist.innerHTML = `<ul role=\"tablist\">\n      <li role=\"presentation\">\n        <a class=\"js-tab\" href=\"#all\" role=\"tab\" aria-controls=\"all\" aria-selected=\"true\">All</a>\n      </li>\n      <li role=\"presentation\">\n        <a class=\"js-tab\" href=\"#saved\" role=\"tab\" aria-controls=\"saved\">Saved (${savedCount})</a>\n      </li>\n    </ul>`;\n});\n\nwindow.addEventListener('click', e => {\n  if (e.target.closest('.js-tab')) {\n    e.preventDefault();\n    const tabs = document.querySelectorAll('.js-tab');\n    const panels = document.querySelectorAll('[role=\"tabpanel\"]');\n    for (let i = 0; i < tabs.length; i++) {\n      tabs[i].removeAttribute('aria-selected');\n    }\n    e.target.closest('.js-tab').setAttribute('aria-selected', 'true');\n\n    for (let i = 0; i < panels.length; i++) {\n      panels[i].setAttribute('aria-hidden', 'true');\n    }\n    document.querySelector(e.target.closest('.js-tab').getAttribute('href')).removeAttribute('aria-hidden');\n  }\n});\n\n\nidbKeyval.get('fmoyt-saved').then(saved => {\n  if (saved) {\n    const ul = document.createElement('ul');\n    ul.classList.add('grid');\n    for (let i = 0; i < saved.length; i++) {\n      const li = createGridItem(saved[i].id, saved[i].poster, saved[i].title, saved[i].release_date);\n      ul.appendChild(li);\n    }\n    document.querySelector('.js-saved').appendChild(ul);\n    requestAnimationFrame(() => {\n      items = document.querySelectorAll('.js-grid-item');\n      imgix.init({\n        srcAttribute: 'data-src',\n        srcsetAttribute: 'data-srcset',\n        sizesAttribute: 'data-sizes',\n      });\n    });\n  }\n});\n","/**\n *\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(document) {\n\n/** @type {string} */\nconst _focusableElementsString = ['a[href]',\n                                  'area[href]',\n                                  'input:not([disabled])',\n                                  'select:not([disabled])',\n                                  'textarea:not([disabled])',\n                                  'button:not([disabled])',\n                                  'iframe',\n                                  'object',\n                                  'embed',\n                                  '[contenteditable]'].join(',');\n\n/**\n * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n * attribute.\n *\n * Its main functions are:\n *\n * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n *   instance exists for each focusable node which has at least one inert root as an ancestor.\n *\n * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n *   attribute is removed from the root node). This is handled in the destructor, which calls the\n *   `deregister` method on `InertManager` for each managed inert node.\n */\nclass InertRoot {\n  /**\n   * @param {Element} rootElement The Element at the root of the inert subtree.\n   * @param {InertManager} inertManager The global singleton InertManager object.\n   */\n  constructor(rootElement, inertManager) {\n    /** @type {InertManager} */\n    this._inertManager = inertManager;\n\n    /** @type {Element} */\n    this._rootElement = rootElement;\n\n    /**\n     * @type {Set<Node>}\n     * All managed focusable nodes in this InertRoot's subtree.\n     */\n    this._managedNodes = new Set([]);\n\n    // Make the subtree hidden from assistive technology\n    this._rootElement.setAttribute('aria-hidden', 'true');\n\n    // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n    this._makeSubtreeUnfocusable(this._rootElement);\n\n    // Watch for:\n    // - any additions in the subtree: make them unfocusable too\n    // - any removals from the subtree: remove them from this inert root's managed nodes\n    // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable element,\n    //   make that node a managed node.\n    this._observer = new MutationObserver(this._onMutation.bind(this));\n    this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n   * stored in this object and updates the state of all of the managed nodes.\n   */\n  destructor() {\n    this._observer.disconnect();\n    this._observer = null;\n\n    if (this._rootElement)\n      this._rootElement.removeAttribute('aria-hidden');\n    this._rootElement = null;\n\n    for (let inertNode of this._managedNodes)\n      this._unmanageNode(inertNode.node);\n\n    this._managedNodes = null;\n\n    this._inertManager = null;\n  }\n\n  /**\n   * @return {Set<InertNode>} A copy of this InertRoot's managed nodes set.\n   */\n  get managedNodes() {\n    return new Set(this._managedNodes);\n  }\n\n  /**\n   * @param {Node} startNode\n   */\n  _makeSubtreeUnfocusable(startNode) {\n    composedTreeWalk(startNode, (node) => { this._visitNode(node); });\n\n    let activeElement = document.activeElement;\n    if (!document.contains(startNode)) {\n      // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n      let node = startNode;\n      let root = undefined;\n      while (node) {\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          root = node;\n          break;\n        }\n        node = node.parentNode;\n      }\n      if (root)\n        activeElement = root.activeElement\n    }\n    if (startNode.contains(activeElement))\n      activeElement.blur();\n  }\n\n  /**\n   * @param {Node} node\n   */\n  _visitNode(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return;\n\n    // If a descendant inert root becomes un-inert, its descendants will still be inert because of this\n    // inert root, so all of its managed nodes need to be adopted by this InertRoot.\n    if (node !== this._rootElement && node.hasAttribute('inert'))\n      this._adoptInertRoot(node);\n\n    if (node.matches(_focusableElementsString) || node.hasAttribute('tabindex'))\n      this._manageNode(node);\n  }\n\n  /**\n   * Register the given node with this InertRoot and with InertManager.\n   * @param {Node} node\n   */\n  _manageNode(node) {\n    const inertNode = this._inertManager.register(node, this);\n    this._managedNodes.add(inertNode);\n  }\n\n  /**\n   * Unregister the given node with this InertRoot and with InertManager.\n   * @param {Node} node\n   */\n  _unmanageNode(node) {\n    const inertNode = this._inertManager.deregister(node, this);\n    if (inertNode)\n      this._managedNodes.delete(inertNode);\n  }\n\n  /**\n   * Unregister the entire subtree starting at `startNode`.\n   * @param {Node} startNode\n   */\n  _unmanageSubtree(startNode) {\n    composedTreeWalk(startNode, (node) => { this._unmanageNode(node); });\n  }\n\n  /**\n   * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n   * @param {Node} node\n   */\n  _adoptInertRoot(node) {\n    let inertSubroot = this._inertManager.getInertRoot(node);\n\n    // During initialisation this inert root may not have been registered yet,\n    // so register it now if need be.\n    if (!inertSubroot) {\n      this._inertManager.setInert(node, true);\n      inertSubroot = this._inertManager.getInertRoot(node);\n    }\n\n    for (let savedInertNode of inertSubroot.managedNodes)\n      this._manageNode(savedInertNode.node);\n  }\n\n  /**\n   * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n   * @param {MutationRecord} records\n   * @param {MutationObserver} self\n   */\n  _onMutation(records, self) {\n    for (let record of records) {\n      const target = record.target;\n      if (record.type === 'childList') {\n        // Manage added nodes\n        for (let node of Array.from(record.addedNodes))\n          this._makeSubtreeUnfocusable(node);\n\n        // Un-manage removed nodes\n        for (let node of Array.from(record.removedNodes))\n          this._unmanageSubtree(node);\n      } else if (record.type === 'attributes') {\n        if (record.attributeName === 'tabindex') {\n          // Re-initialise inert node if tabindex changes\n          this._manageNode(target);\n        } else if (target !== this._rootElement &&\n                   record.attributeName === 'inert' &&\n                   target.hasAttribute('inert')) {\n          // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n          // already managed nodes from this inert subroot.\n          this._adoptInertRoot(target);\n          const inertSubroot = this._inertManager.getInertRoot(target);\n          for (let managedNode of this._managedNodes) {\n            if (target.contains(managedNode.node))\n              inertSubroot._manageNode(managedNode.node);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * `InertNode` initialises and manages a single inert node.\n * A node is inert if it is a descendant of one or more inert root elements.\n *\n * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n * is intrinsically focusable or not.\n *\n * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n * or removes the `tabindex` attribute if the element is intrinsically focusable.\n */\nclass InertNode {\n  /**\n   * @param {Node} node A focusable element to be made inert.\n   * @param {InertRoot} inertRoot The inert root element associated with this inert node.\n   */\n  constructor(node, inertRoot) {\n    /** @type {Node} */\n    this._node = node;\n\n    /** @type {boolean} */\n    this._overrodeFocusMethod = false;\n\n    /**\n     * @type {Set<InertRoot>} The set of descendant inert roots.\n     *    If and only if this set becomes empty, this node is no longer inert.\n     */\n    this._inertRoots = new Set([inertRoot]);\n\n    /** @type {boolean} */\n    this._destroyed = false;\n\n    // Save any prior tabindex info and make this node untabbable\n    this.ensureUntabbable();\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.\n   * This makes the managed node focusable again and deletes all of the previously stored state.\n   */\n  destructor() {\n    this._throwIfDestroyed();\n\n    if (this._node) {\n      if (this.hasSavedTabIndex)\n        this._node.setAttribute('tabindex', this.savedTabIndex);\n      else\n        this._node.removeAttribute('tabindex');\n\n      // Use `delete` to restore native focus method.\n      if (this._overrodeFocusMethod)\n        delete this._node.focus;\n    }\n    this._node = null;\n    this._inertRoots = null;\n\n    this._destroyed = true;\n  }\n\n  /**\n   * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n   * If the object has been destroyed, any attempt to access it will cause an exception.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n\n  _throwIfDestroyed() {\n    if (this.destroyed)\n      throw new Error(\"Trying to access destroyed InertNode\");\n  }\n\n  /** @return {boolean} */\n  get hasSavedTabIndex() {\n    return '_savedTabIndex' in this;\n  }\n\n  /** @return {Node} */\n  get node() {\n    this._throwIfDestroyed();\n    return this._node;\n  }\n\n  /** @param {number} tabIndex */\n  set savedTabIndex(tabIndex) {\n    this._throwIfDestroyed();\n    this._savedTabIndex = tabIndex;\n  }\n\n  /** @return {number} */\n  get savedTabIndex() {\n    this._throwIfDestroyed();\n    return this._savedTabIndex;\n  }\n\n  /** Save the existing tabindex value and make the node untabbable and unfocusable */\n  ensureUntabbable() {\n    const node = this.node;\n    if (node.matches(_focusableElementsString)) {\n      if (node.tabIndex === -1 && this.hasSavedTabIndex)\n        return;\n\n      if (node.hasAttribute('tabindex'))\n        this._savedTabIndex = node.tabIndex;\n      node.setAttribute('tabindex', '-1');\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        node.focus = function() {};\n        this._overrodeFocusMethod = true;\n      }\n    } else if (node.hasAttribute('tabindex')) {\n      this._savedTabIndex = node.tabIndex;\n      node.removeAttribute('tabindex');\n    }\n  }\n\n  /**\n   * Add another inert root to this inert node's set of managing inert roots.\n   * @param {InertRoot} inertRoot\n   */\n  addInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.add(inertRoot);\n  }\n\n  /**\n   * Remove the given inert root from this inert node's set of managing inert roots.\n   * If the set of managing inert roots becomes empty, this node is no longer inert,\n   * so the object should be destroyed.\n   * @param {InertRoot} inertRoot\n   */\n  removeInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.delete(inertRoot);\n    if (this._inertRoots.size === 0)\n      this.destructor();\n  }\n}\n\n/**\n * InertManager is a per-document singleton object which manages all inert roots and nodes.\n *\n * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n * is created for each such node, via the `_managedNodes` map.\n */\nclass InertManager {\n  /**\n   * @param {Document} document\n   */\n  constructor(document) {\n    if (!document)\n      throw new Error('Missing required argument; InertManager needs to wrap a document.');\n\n    /** @type {Document} */\n    this._document = document;\n\n    /**\n     * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n     * @type {Map<Node, InertNode>}\n     */\n    this._managedNodes = new Map();\n\n    /**\n     * All inert roots known to this InertManager. In a map to allow looking up by Node.\n     * @type {Map<Node, InertRoot>}\n     */\n    this._inertRoots = new Map();\n\n    /**\n     * Observer for mutations on `document.body`.\n     * @type {MutationObserver}\n     */\n    this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n\n    // Add inert style.\n    addInertStyle(document.head || document.body || document.documentElement);\n\n    // Wait for document to be loaded.\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n    } else {\n      this._onDocumentLoaded();\n    }\n  }\n\n  /**\n   * Set whether the given element should be an inert root or not.\n   * @param {Element} root\n   * @param {boolean} inert\n   */\n  setInert(root, inert) {\n    if (inert) {\n      if (this._inertRoots.has(root))   // element is already inert\n        return;\n\n      const inertRoot = new InertRoot(root, this);\n      root.setAttribute('inert', '');\n      this._inertRoots.set(root, inertRoot);\n      // If not contained in the document, it must be in a shadowRoot.\n      // Ensure inert styles are added there.\n      if (!this._document.body.contains(root)) {\n        let parent = root.parentNode;\n        while (parent) {\n          if (parent.nodeType === 11) {\n            addInertStyle(parent);\n          }\n          parent = parent.parentNode;\n        }\n      }\n    } else {\n      if (!this._inertRoots.has(root))  // element is already non-inert\n        return;\n\n      const inertRoot = this._inertRoots.get(root);\n      inertRoot.destructor();\n      this._inertRoots.delete(root);\n      root.removeAttribute('inert');\n    }\n  }\n\n  /**\n   * Get the InertRoot object corresponding to the given inert root element, if any.\n   * @param {Element} element\n   * @return {InertRoot?}\n   */\n  getInertRoot(element) {\n    return this._inertRoots.get(element);\n  }\n\n  /**\n   * Register the given InertRoot as managing the given node.\n   * In the case where the node has a previously existing inert root, this inert root will\n   * be added to its set of inert roots.\n   * @param {Node} node\n   * @param {InertRoot} inertRoot\n   * @return {InertNode} inertNode\n   */\n  register(node, inertRoot) {\n    let inertNode = this._managedNodes.get(node);\n    if (inertNode !== undefined) {  // node was already in an inert subtree\n      inertNode.addInertRoot(inertRoot);\n      // Update saved tabindex value if necessary\n      inertNode.ensureUntabbable();\n    } else {\n      inertNode = new InertNode(node, inertRoot);\n    }\n\n    this._managedNodes.set(node, inertNode);\n\n    return inertNode;\n  }\n\n  /**\n   * De-register the given InertRoot as managing the given inert node.\n   * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n   * node from the InertManager's set of managed nodes if it is destroyed.\n   * If the node is not currently managed, this is essentially a no-op.\n   * @param {Node} node\n   * @param {InertRoot} inertRoot\n   * @return {InertNode?} The potentially destroyed InertNode associated with this node, if any.\n   */\n  deregister(node, inertRoot) {\n    const inertNode = this._managedNodes.get(node);\n    if (!inertNode)\n      return null;\n\n    inertNode.removeInertRoot(inertRoot);\n    if (inertNode.destroyed)\n      this._managedNodes.delete(node);\n\n    return inertNode;\n  }\n\n  /**\n   * Callback used when document has finished loading.\n   */\n  _onDocumentLoaded() {\n    // Find all inert roots in document and make them actually inert.\n    const inertElements = Array.from(this._document.querySelectorAll('[inert]'));\n    for (let inertElement of inertElements)\n      this.setInert(inertElement, true);\n\n    // Comment this out to use programmatic API only.\n    this._observer.observe(this._document.body, { attributes: true, subtree: true, childList: true });\n  }\n\n  /**\n   * Callback used when mutation observer detects attribute changes.\n   * @param {MutationRecord} records\n   * @param {MutationObserver} self\n   */\n  _watchForInert(records, self) {\n    for (let record of records) {\n      switch (record.type) {\n      case 'childList':\n        for (let node of Array.from(record.addedNodes)) {\n          if (node.nodeType !== Node.ELEMENT_NODE)\n            continue;\n          const inertElements = Array.from(node.querySelectorAll('[inert]'));\n          if (node.matches('[inert]'))\n            inertElements.unshift(node);\n          for (let inertElement of inertElements)\n            this.setInert(inertElement, true);\n        }\n        break;\n      case 'attributes':\n        if (record.attributeName !== 'inert')\n          continue;\n        const target = record.target;\n        const inert = target.hasAttribute('inert');\n        this.setInert(target, inert);\n        break;\n      }\n    }\n  }\n}\n\n /**\n  * Recursively walk the composed tree from |node|.\n  * @param {Node} node\n  * @param {(function (Element))=} callback Callback to be called for each element traversed,\n  *     before descending into child nodes.\n  * @param {ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n  */\nfunction composedTreeWalk(node, callback, shadowRootAncestor) {\n  if (node.nodeType == Node.ELEMENT_NODE) {\n    const element = /** @type {Element} */ (node);\n    if (callback)\n      callback(element)\n\n    // Descend into node:\n    // If it has a ShadowRoot, ignore all child elements - these will be picked\n    // up by the <content> or <shadow> elements. Descend straight into the\n    // ShadowRoot.\n    const shadowRoot = element.shadowRoot || element.webkitShadowRoot;\n    if (shadowRoot) {\n      composedTreeWalk(shadowRoot, callback, shadowRoot);\n      return;\n    }\n\n    // If it is a <content> element, descend into distributed elements - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'content') {\n      const content = /** @type {HTMLContentElement} */ (element);\n      // Verifies if ShadowDom v0 is supported.\n      const distributedNodes = content.getDistributedNodes ?\n        content.getDistributedNodes() : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n\n    // If it is a <slot> element, descend into assigned nodes - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'slot') {\n      const slot = /** @type {HTMLSlotElement} */ (element);\n      // Verify if ShadowDom v1 is supported.\n      const distributedNodes = slot.assignedNodes ?\n        slot.assignedNodes({ flatten: true }) : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n  }\n\n  // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n  // element, nor a <shadow> element recurse normally.\n  let child = node.firstChild;\n  while (child != null) {\n    composedTreeWalk(child, callback, shadowRootAncestor);\n    child = child.nextSibling;\n  }\n}\n\n/**\n * Adds a style element to the node containing the inert specific styles\n * @param {Node} node\n */\nfunction addInertStyle(node) {\n  if (node.querySelector('style#inert-style')) {\n    return;\n  }\n  const style = document.createElement('style');\n  style.setAttribute('id', 'inert-style');\n  style.textContent = \"\\n\"+\n                      \"[inert] {\\n\" +\n                      \"  pointer-events: none;\\n\" +\n                      \"  cursor: default;\\n\" +\n                      \"}\\n\" +\n                      \"\\n\" +\n                      \"[inert], [inert] * {\\n\" +\n                      \"  user-select: none;\\n\" +\n                      \"  -webkit-user-select: none;\\n\" +\n                      \"  -moz-user-select: none;\\n\" +\n                      \"  -ms-user-select: none;\\n\" +\n                      \"}\\n\";\n  node.appendChild(style);\n}\n\nconst inertManager = new InertManager(document);\n\nObject.defineProperty(Element.prototype, 'inert', {\n                        enumerable: true,\n                        get: function() { return this.hasAttribute('inert'); },\n                        set: function(inert) { inertManager.setInert(this, inert) }\n                      });\n\n})(document);\n","(function() {\n  'use strict';\n  var db;\n\n  function getDB() {\n    if (!db) {\n      db = new Promise(function(resolve, reject) {\n        var openreq = indexedDB.open('keyval-store', 1);\n        \n        openreq.onerror = function() {\n          reject(openreq.error);\n        };\n        \n        openreq.onupgradeneeded = function() {\n          // First time setup: create an empty object store\n          openreq.result.createObjectStore('keyval');\n        };\n\n        openreq.onsuccess = function() {\n          resolve(openreq.result);\n        };\n      });\n    }\n    return db;\n  }\n\n  function withStore(type, callback) {\n    return getDB().then(function(db) {\n      return new Promise(function(resolve, reject) {\n        var transaction = db.transaction('keyval', type);\n        transaction.oncomplete = function() {\n          resolve();\n        };\n        transaction.onerror = function() {\n          reject(transaction.error);\n        };\n        callback(transaction.objectStore('keyval'));\n      });\n    });\n  }\n\n  var idbKeyval = {\n    get: function(key) {\n      var req;\n      return withStore('readonly', function(store) {\n        req = store.get(key);\n      }).then(function() {\n        return req.result;\n      });\n    },\n    set: function(key, value) {\n      return withStore('readwrite', function(store) {\n        store.put(value, key);\n      });\n    },\n    delete: function(key) {\n      return withStore('readwrite', function(store) {\n        store.delete(key);\n      });\n    },\n    clear: function() {\n      return withStore('readwrite', function(store) {\n        store.clear();\n      });\n    },\n    keys: function() {\n      var keys = [];\n      return withStore('readonly', function(store) {\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // And openKeyCursor isn't supported by Safari.\n        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function() {\n          if (!this.result) return;\n          keys.push(this.result.key);\n          this.result.continue();\n        };  \n      }).then(function() {\n        return keys;\n      });\n    }\n  };\n\n  if (typeof module != 'undefined' && module.exports) {\n    module.exports = idbKeyval;\n  } else {\n    self.idbKeyval = idbKeyval;\n  }\n}());\n"],"sourceRoot":"/source/"}