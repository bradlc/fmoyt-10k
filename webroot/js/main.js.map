{"version":3,"sources":["main.js","_inert.js"],"names":["formatDate","date","months","year","substring","month","parseInt","day","_focusableElementsString","result","fn","apply","context","this","arguments","debounce","func","wait","immediate","timeout","args","later","callNow","setTimeout","rootElement","get","url","success","xhr","window","XMLHttpRequest","ActiveXObject","open","_rootElement","onreadystatechange","readyState","status","responseText","setRequestHeader","_managedNodes","send","flip","e","preventDefault","poster","querySelector","modalActive","image","_observer","observe","src","currentSrc","style","backgroundImage","classList","add","fromRect","movie","getBoundingClientRect","toRect","scale","width","left","disconnect","top","transform","removeAttribute","remove","opacity","addEventListener","once","inert","focusedItem","focus","borderRadius","inertNode","_unmanageNode","href","target","closest","data","movieData","JSON","parse","textContent","title","overview","release_date","youtube_id","requestAnimationFrame","activeElement","setFocusedItem","startNode","root","undefined","getPerRow","i","items","length","newTop","getNodeIndex","node","previousElementSibling","document","composedTreeWalk","callback","shadowRootAncestor","nodeType","Node","ELEMENT_NODE","element","shadowRoot","webkitShadowRoot","localName","content","distributedNodes","getDistributedNodes","slot","assignedNodes","flatten","child","firstChild","nextSibling","addInertStyle","createElement","setAttribute","appendChild","join","InertRoot","inertManager","_inertManager","Set","_makeSubtreeUnfocusable","MutationObserver","_onMutation","bind","attributes","childList","subtree","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","value","_visitNode","contains","DOCUMENT_FRAGMENT_NODE","parentNode","blur","hasAttribute","_adoptInertRoot","matches","_manageNode","register","deregister","delete","inertSubroot","getInertRoot","setInert","_step2","managedNodes","_iteratorNormalCompletion2","_iterator2","savedInertNode","records","self","_step3","_iteratorNormalCompletion3","_iterator3","record","type","_step4","Array","from","addedNodes","_iteratorNormalCompletion4","_iterator4","_step5","removedNodes","_iteratorNormalCompletion5","_iterator5","_unmanageSubtree","attributeName","_step6","_iteratorNormalCompletion6","_iterator6","managedNode","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_destroyed","ensureUntabbable","_throwIfDestroyed","hasSavedTabIndex","savedTabIndex","destroyed","Error","tabIndex","_savedTabIndex","size","destructor","InertManager","_document","Map","_watchForInert","head","body","documentElement","_onDocumentLoaded","has","set","parent","addInertRoot","removeInertRoot","inertElements","querySelectorAll","_step7","_iteratorNormalCompletion7","_iterator7","inertElement","_step8","_iteratorNormalCompletion8","_iterator8","_step9","_iteratorNormalCompletion9","_iterator9","unshift","_step10","_iteratorNormalCompletion10","_iterator10","defineProperty","Element","prototype","activeItem","main","movieContainer","movieContainerBg","movieInner","movieFront","movieBack","movieBackPoster","movieTitle","movieOverview","movieReleaseDate","movieLink","UP","RIGHT","DOWN","LEFT","ESC","loadMore","movies","els","createDocumentFragment","a","div","alt","h3","innerHTML","log","insertBefore","perRow","which","activeEl","currentIndex","newIndex"],"mappings":"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","file":"main.js","sourcesContent":["import './_inert.js';\n\nlet nextPage = 2;\n\nlet modalActive = false;\nlet activeItem = null;\n\nconst main = document.querySelector('.js-main');\nconst movieContainer = document.querySelector('.js-movie-container');\nconst movieContainerBg = document.querySelector('.js-movie-container-bg');\nconst movie = document.querySelector('.js-movie');\nconst movieInner = document.querySelector('.js-movie-inner');\nconst movieFront = document.querySelector('.js-movie-front');\nconst movieBack = document.querySelector('.js-movie-back');\nconst movieBackPoster = document.querySelector('.js-movie-back-poster');\n\nconst movieTitle = document.querySelector('.js-movie-title');\nconst movieOverview = document.querySelector('.js-movie-overview');\nconst movieReleaseDate = document.querySelector('.js-movie-release-date');\nconst movieLink = document.querySelector('.js-movie-link');\n\nconst items = document.querySelectorAll('.js-grid-item');\n\nlet focusedItem = null;\n\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\nconst LEFT = 37;\nconst ESC = 27;\n\nif (!movieContainer.classList.contains('movie-container--single')) {\n  movieContainer.inert = true;\n}\n\nfunction formatDate(date) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const year = date.substring(0, 4);\n  let month = date.substring(5, 7);\n  month = (month.substring(0, 1) === '0') ? month.substring(1) : month;\n  month = months[parseInt(month, 10) - 1];\n  let day = date.substring(8, 10);\n  day = (day.substring(0, 1) === '0') ? day.substring(1) : day;\n  return `${day} ${month} ${year}`;\n}\n\n/* eslint-disable */\nfunction once(fn, context) {\n  let result;\n\n  return function () {\n    if (fn) {\n      result = fn.apply(context || this, arguments);\n      fn = null;\n    }\n\n    return result;\n  };\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout;\n  return function() {\n    const context = this;\n    const args = arguments;\n    const later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\nfunction get(url, success) {\n  var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');\n  xhr.open('GET', url);\n\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState > 3 && xhr.status === 200) success(xhr.responseText);\n  };\n\n  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  xhr.send();\n\n  return xhr;\n}\n/* eslint-enable */\n\nfunction flip(e) {\n  if (typeof e !== 'undefined') e.preventDefault();\n\n  const poster = this.querySelector('.js-grid-poster');\n\n  // update poster\n  if (!modalActive) {\n    const image = poster.querySelector('img');\n    const src = typeof image.currentSrc !== 'undefined' ? image.currentSrc : image.src;\n    movieFront.style.backgroundImage = `url('${src}')`;\n    movieBackPoster.style.backgroundImage = `url('${src}')`;\n\n    movieContainer.classList.add('movie-container--visible');\n  }\n\n  const fromRect = movie.getBoundingClientRect();\n  const toRect = poster.getBoundingClientRect();\n\n  const scale = 1 / (fromRect.width / toRect.width);\n  const left = toRect.left - fromRect.left;\n  const top = toRect.top - fromRect.top;\n\n  movie.style.transform = `translate(${left}px, ${top}px)`;\n  movieInner.style.transform = `scale(${scale})`;\n\n  // border radius\n  if (!modalActive) {\n    const borderRadius = 3 * (1 / scale);\n    movieFront.style.borderRadius = `${borderRadius}px`;\n    movieBack.style.borderRadius = `${borderRadius}px`;\n\n    poster.style.opacity = 0;\n\n    movieContainer.inert = false;\n    main.inert = true;\n\n    const href = e.target.closest('a').href;\n\n    get(href, data => {\n      const movieData = JSON.parse(data);\n      movieTitle.textContent = movieData.title;\n      movieOverview.textContent = movieData.overview;\n      movieReleaseDate.textContent = formatDate(movieData.release_date);\n      movieLink.href = `https://www.youtube.com/watch?v=${movieData.youtube_id}`;\n    });\n\n    window.requestAnimationFrame(() => {\n      movieContainer.classList.add('movie-container--animate');\n      movieInner.style.transform = 'none';\n      movie.style.transform = 'none';\n      movieContainerBg.style.opacity = 1;\n      movie.classList.add('movie--flipped');\n    });\n  } else {\n    movie.classList.remove('movie--flipped');\n    movieContainerBg.style.opacity = 0;\n    movie.addEventListener('transitionend', once(() => {\n      poster.style.opacity = 1;\n      movieContainer.classList.remove('movie-container--animate');\n      movieContainer.classList.remove('movie-container--visible');\n      movie.style.transform = 'none';\n      movieInner.style.transform = 'none';\n\n      movieContainer.inert = true;\n      main.inert = false;\n\n      if (focusedItem) {\n        focusedItem.focus();\n      }\n    }));\n  }\n\n  modalActive = !modalActive;\n  activeItem = this;\n}\n\nfunction setFocusedItem(event) {\n  focusedItem = event.target.closest('.js-grid-item');\n}\n\nfor (let i = 0; i < items.length; i++) {\n  items[i].addEventListener('click', flip);\n\n  items[i].addEventListener('focus', setFocusedItem);\n}\n\nmovieContainer.addEventListener('click', () => {\n  flip.bind(activeItem)();\n});\n\n/**\n * Load more\n */\nconst loadMore = document.querySelector('.js-load-more');\n\nif (loadMore) {\n  loadMore.addEventListener('click', e => {\n    e.preventDefault();\n    get(e.target.closest('a').href, data => {\n      const movies = JSON.parse(data);\n      const els = document.createDocumentFragment();\n      for (let i = 0; i < movies.length; i++) {\n\n        const li = document.createElement('li');\n        li.classList.add('grid-item');\n\n        const a = document.createElement('a');\n        a.href = `/${movies[i].youtube_id}`;\n        a.classList.add('js-grid-item');\n\n        const div = document.createElement('div');\n        div.classList.add('grid-item__poster');\n        div.classList.add('js-grid-poster');\n\n        const img = document.createElement('img');\n        img.setAttribute('ix-src', `https://fmoyt-10k.imgix.net${movies[i].poster}?w=320&amp;h=480&amp;fit=crop&amp;auto=format,compress`);\n        img.alt = '';\n        img.setAttribute('sizes', '170px');\n        img.classList.add('lazyload');\n\n        const h3 = document.createElement('h3');\n        h3.textContent = movies[i].title;\n\n        els.innerHTML += `\n          <li class=\"grid-item\">\n            <a href=\"/${movies[i].youtube_id}\" class=\"js-grid-item\">\n              <div class=\"grid-item__poster js-grid-poster\">\n                <img ix-src=\"https://fmoyt-10k.imgix.net${movies[i].poster}?w=320&amp;h=480&amp;fit=crop&amp;auto=format,compress\" alt=\"\" sizes=\"170px\" class=\"lazyload\">\n              </div>\n              <h3>${movies[i].title}</h3>\n              <time datetime=\"2016\" class=\"mono\">${movies[i].release_date}</time>\n            </a>\n          </li>\n        `;\n      }\n      console.log(els);\n      loadMore.parentNode.insertBefore(els, loadMore);\n    });\n  });\n}\n\n/**\n * Keyboard nav\n */\nfunction getPerRow() {\n  let top = null;\n  let i;\n  for (i = 0; i < items.length; i++) {\n    const newTop = items[i].getBoundingClientRect().top;\n    if (top !== null && newTop !== top) {\n      break;\n    }\n    top = newTop;\n  }\n  return i;\n}\nlet perRow = getPerRow();\nwindow.addEventListener('resize', debounce(() => {\n  perRow = getPerRow();\n}, 250));\n\ndocument.addEventListener('keydown', e => {\n  if (e.which !== UP && e.which !== RIGHT && e.which !== DOWN && e.which !== LEFT) return;\n  const activeEl = document.activeElement;\n  if (!activeEl.closest('.grid-item')) {\n    items[0].focus();\n    return;\n  }\n  const currentIndex = getNodeIndex(activeEl.closest('.grid-item'));\n  let newIndex;\n  if (e.which === LEFT) {\n    newIndex = currentIndex - 1;\n  }\n  if (e.which === RIGHT) {\n    newIndex = currentIndex + 1;\n  }\n  if (e.which === DOWN) {\n    newIndex = currentIndex + perRow;\n  }\n  if (e.which === UP) {\n    newIndex = currentIndex - perRow;\n  }\n  if (newIndex >= 0 && newIndex < items.length) {\n    items[newIndex].focus();\n  }\n});\n\ndocument.addEventListener('keydown', e => {\n  if (e.which === ESC && modalActive) {\n    flip.bind(activeItem)();\n  }\n});\n\nfunction getNodeIndex(node) {\n  for (var i = 0; node = node.previousElementSibling; i++);\n  return i;\n}\n","/**\n *\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(document) {\n\n/** @type {string} */\nconst _focusableElementsString = ['a[href]',\n                                  'area[href]',\n                                  'input:not([disabled])',\n                                  'select:not([disabled])',\n                                  'textarea:not([disabled])',\n                                  'button:not([disabled])',\n                                  'iframe',\n                                  'object',\n                                  'embed',\n                                  '[contenteditable]'].join(',');\n\n/**\n * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n * attribute.\n *\n * Its main functions are:\n *\n * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n *   instance exists for each focusable node which has at least one inert root as an ancestor.\n *\n * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n *   attribute is removed from the root node). This is handled in the destructor, which calls the\n *   `deregister` method on `InertManager` for each managed inert node.\n */\nclass InertRoot {\n  /**\n   * @param {Element} rootElement The Element at the root of the inert subtree.\n   * @param {InertManager} inertManager The global singleton InertManager object.\n   */\n  constructor(rootElement, inertManager) {\n    /** @type {InertManager} */\n    this._inertManager = inertManager;\n\n    /** @type {Element} */\n    this._rootElement = rootElement;\n\n    /**\n     * @type {Set<Node>}\n     * All managed focusable nodes in this InertRoot's subtree.\n     */\n    this._managedNodes = new Set([]);\n\n    // Make the subtree hidden from assistive technology\n    this._rootElement.setAttribute('aria-hidden', 'true');\n\n    // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n    this._makeSubtreeUnfocusable(this._rootElement);\n\n    // Watch for:\n    // - any additions in the subtree: make them unfocusable too\n    // - any removals from the subtree: remove them from this inert root's managed nodes\n    // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable element,\n    //   make that node a managed node.\n    this._observer = new MutationObserver(this._onMutation.bind(this));\n    this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n   * stored in this object and updates the state of all of the managed nodes.\n   */\n  destructor() {\n    this._observer.disconnect();\n    this._observer = null;\n\n    if (this._rootElement)\n      this._rootElement.removeAttribute('aria-hidden');\n    this._rootElement = null;\n\n    for (let inertNode of this._managedNodes)\n      this._unmanageNode(inertNode.node);\n\n    this._managedNodes = null;\n\n    this._inertManager = null;\n  }\n\n  /**\n   * @return {Set<InertNode>} A copy of this InertRoot's managed nodes set.\n   */\n  get managedNodes() {\n    return new Set(this._managedNodes);\n  }\n\n  /**\n   * @param {Node} startNode\n   */\n  _makeSubtreeUnfocusable(startNode) {\n    composedTreeWalk(startNode, (node) => { this._visitNode(node); });\n\n    let activeElement = document.activeElement;\n    if (!document.contains(startNode)) {\n      // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n      let node = startNode;\n      let root = undefined;\n      while (node) {\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          root = node;\n          break;\n        }\n        node = node.parentNode;\n      }\n      if (root)\n        activeElement = root.activeElement\n    }\n    if (startNode.contains(activeElement))\n      activeElement.blur();\n  }\n\n  /**\n   * @param {Node} node\n   */\n  _visitNode(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return;\n\n    // If a descendant inert root becomes un-inert, its descendants will still be inert because of this\n    // inert root, so all of its managed nodes need to be adopted by this InertRoot.\n    if (node !== this._rootElement && node.hasAttribute('inert'))\n      this._adoptInertRoot(node);\n\n    if (node.matches(_focusableElementsString) || node.hasAttribute('tabindex'))\n      this._manageNode(node);\n  }\n\n  /**\n   * Register the given node with this InertRoot and with InertManager.\n   * @param {Node} node\n   */\n  _manageNode(node) {\n    const inertNode = this._inertManager.register(node, this);\n    this._managedNodes.add(inertNode);\n  }\n\n  /**\n   * Unregister the given node with this InertRoot and with InertManager.\n   * @param {Node} node\n   */\n  _unmanageNode(node) {\n    const inertNode = this._inertManager.deregister(node, this);\n    if (inertNode)\n      this._managedNodes.delete(inertNode);\n  }\n\n  /**\n   * Unregister the entire subtree starting at `startNode`.\n   * @param {Node} startNode\n   */\n  _unmanageSubtree(startNode) {\n    composedTreeWalk(startNode, (node) => { this._unmanageNode(node); });\n  }\n\n  /**\n   * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n   * @param {Node} node\n   */\n  _adoptInertRoot(node) {\n    let inertSubroot = this._inertManager.getInertRoot(node);\n\n    // During initialisation this inert root may not have been registered yet,\n    // so register it now if need be.\n    if (!inertSubroot) {\n      this._inertManager.setInert(node, true);\n      inertSubroot = this._inertManager.getInertRoot(node);\n    }\n\n    for (let savedInertNode of inertSubroot.managedNodes)\n      this._manageNode(savedInertNode.node);\n  }\n\n  /**\n   * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n   * @param {MutationRecord} records\n   * @param {MutationObserver} self\n   */\n  _onMutation(records, self) {\n    for (let record of records) {\n      const target = record.target;\n      if (record.type === 'childList') {\n        // Manage added nodes\n        for (let node of Array.from(record.addedNodes))\n          this._makeSubtreeUnfocusable(node);\n\n        // Un-manage removed nodes\n        for (let node of Array.from(record.removedNodes))\n          this._unmanageSubtree(node);\n      } else if (record.type === 'attributes') {\n        if (record.attributeName === 'tabindex') {\n          // Re-initialise inert node if tabindex changes\n          this._manageNode(target);\n        } else if (target !== this._rootElement &&\n                   record.attributeName === 'inert' &&\n                   target.hasAttribute('inert')) {\n          // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n          // already managed nodes from this inert subroot.\n          this._adoptInertRoot(target);\n          const inertSubroot = this._inertManager.getInertRoot(target);\n          for (let managedNode of this._managedNodes) {\n            if (target.contains(managedNode.node))\n              inertSubroot._manageNode(managedNode.node);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * `InertNode` initialises and manages a single inert node.\n * A node is inert if it is a descendant of one or more inert root elements.\n *\n * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n * is intrinsically focusable or not.\n *\n * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n * or removes the `tabindex` attribute if the element is intrinsically focusable.\n */\nclass InertNode {\n  /**\n   * @param {Node} node A focusable element to be made inert.\n   * @param {InertRoot} inertRoot The inert root element associated with this inert node.\n   */\n  constructor(node, inertRoot) {\n    /** @type {Node} */\n    this._node = node;\n\n    /** @type {boolean} */\n    this._overrodeFocusMethod = false;\n\n    /**\n     * @type {Set<InertRoot>} The set of descendant inert roots.\n     *    If and only if this set becomes empty, this node is no longer inert.\n     */\n    this._inertRoots = new Set([inertRoot]);\n\n    /** @type {boolean} */\n    this._destroyed = false;\n\n    // Save any prior tabindex info and make this node untabbable\n    this.ensureUntabbable();\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.\n   * This makes the managed node focusable again and deletes all of the previously stored state.\n   */\n  destructor() {\n    this._throwIfDestroyed();\n\n    if (this._node) {\n      if (this.hasSavedTabIndex)\n        this._node.setAttribute('tabindex', this.savedTabIndex);\n      else\n        this._node.removeAttribute('tabindex');\n\n      // Use `delete` to restore native focus method.\n      if (this._overrodeFocusMethod)\n        delete this._node.focus;\n    }\n    this._node = null;\n    this._inertRoots = null;\n\n    this._destroyed = true;\n  }\n\n  /**\n   * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n   * If the object has been destroyed, any attempt to access it will cause an exception.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n\n  _throwIfDestroyed() {\n    if (this.destroyed)\n      throw new Error(\"Trying to access destroyed InertNode\");\n  }\n\n  /** @return {boolean} */\n  get hasSavedTabIndex() {\n    return '_savedTabIndex' in this;\n  }\n\n  /** @return {Node} */\n  get node() {\n    this._throwIfDestroyed();\n    return this._node;\n  }\n\n  /** @param {number} tabIndex */\n  set savedTabIndex(tabIndex) {\n    this._throwIfDestroyed();\n    this._savedTabIndex = tabIndex;\n  }\n\n  /** @return {number} */\n  get savedTabIndex() {\n    this._throwIfDestroyed();\n    return this._savedTabIndex;\n  }\n\n  /** Save the existing tabindex value and make the node untabbable and unfocusable */\n  ensureUntabbable() {\n    const node = this.node;\n    if (node.matches(_focusableElementsString)) {\n      if (node.tabIndex === -1 && this.hasSavedTabIndex)\n        return;\n\n      if (node.hasAttribute('tabindex'))\n        this._savedTabIndex = node.tabIndex;\n      node.setAttribute('tabindex', '-1');\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        node.focus = function() {};\n        this._overrodeFocusMethod = true;\n      }\n    } else if (node.hasAttribute('tabindex')) {\n      this._savedTabIndex = node.tabIndex;\n      node.removeAttribute('tabindex');\n    }\n  }\n\n  /**\n   * Add another inert root to this inert node's set of managing inert roots.\n   * @param {InertRoot} inertRoot\n   */\n  addInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.add(inertRoot);\n  }\n\n  /**\n   * Remove the given inert root from this inert node's set of managing inert roots.\n   * If the set of managing inert roots becomes empty, this node is no longer inert,\n   * so the object should be destroyed.\n   * @param {InertRoot} inertRoot\n   */\n  removeInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.delete(inertRoot);\n    if (this._inertRoots.size === 0)\n      this.destructor();\n  }\n}\n\n/**\n * InertManager is a per-document singleton object which manages all inert roots and nodes.\n *\n * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n * is created for each such node, via the `_managedNodes` map.\n */\nclass InertManager {\n  /**\n   * @param {Document} document\n   */\n  constructor(document) {\n    if (!document)\n      throw new Error('Missing required argument; InertManager needs to wrap a document.');\n\n    /** @type {Document} */\n    this._document = document;\n\n    /**\n     * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n     * @type {Map<Node, InertNode>}\n     */\n    this._managedNodes = new Map();\n\n    /**\n     * All inert roots known to this InertManager. In a map to allow looking up by Node.\n     * @type {Map<Node, InertRoot>}\n     */\n    this._inertRoots = new Map();\n\n    /**\n     * Observer for mutations on `document.body`.\n     * @type {MutationObserver}\n     */\n    this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n\n    // Add inert style.\n    addInertStyle(document.head || document.body || document.documentElement);\n\n    // Wait for document to be loaded.\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n    } else {\n      this._onDocumentLoaded();\n    }\n  }\n\n  /**\n   * Set whether the given element should be an inert root or not.\n   * @param {Element} root\n   * @param {boolean} inert\n   */\n  setInert(root, inert) {\n    if (inert) {\n      if (this._inertRoots.has(root))   // element is already inert\n        return;\n\n      const inertRoot = new InertRoot(root, this);\n      root.setAttribute('inert', '');\n      this._inertRoots.set(root, inertRoot);\n      // If not contained in the document, it must be in a shadowRoot.\n      // Ensure inert styles are added there.\n      if (!this._document.body.contains(root)) {\n        let parent = root.parentNode;\n        while (parent) {\n          if (parent.nodeType === 11) {\n            addInertStyle(parent);\n          }\n          parent = parent.parentNode;\n        }\n      }\n    } else {\n      if (!this._inertRoots.has(root))  // element is already non-inert\n        return;\n\n      const inertRoot = this._inertRoots.get(root);\n      inertRoot.destructor();\n      this._inertRoots.delete(root);\n      root.removeAttribute('inert');\n    }\n  }\n\n  /**\n   * Get the InertRoot object corresponding to the given inert root element, if any.\n   * @param {Element} element\n   * @return {InertRoot?}\n   */\n  getInertRoot(element) {\n    return this._inertRoots.get(element);\n  }\n\n  /**\n   * Register the given InertRoot as managing the given node.\n   * In the case where the node has a previously existing inert root, this inert root will\n   * be added to its set of inert roots.\n   * @param {Node} node\n   * @param {InertRoot} inertRoot\n   * @return {InertNode} inertNode\n   */\n  register(node, inertRoot) {\n    let inertNode = this._managedNodes.get(node);\n    if (inertNode !== undefined) {  // node was already in an inert subtree\n      inertNode.addInertRoot(inertRoot);\n      // Update saved tabindex value if necessary\n      inertNode.ensureUntabbable();\n    } else {\n      inertNode = new InertNode(node, inertRoot);\n    }\n\n    this._managedNodes.set(node, inertNode);\n\n    return inertNode;\n  }\n\n  /**\n   * De-register the given InertRoot as managing the given inert node.\n   * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n   * node from the InertManager's set of managed nodes if it is destroyed.\n   * If the node is not currently managed, this is essentially a no-op.\n   * @param {Node} node\n   * @param {InertRoot} inertRoot\n   * @return {InertNode?} The potentially destroyed InertNode associated with this node, if any.\n   */\n  deregister(node, inertRoot) {\n    const inertNode = this._managedNodes.get(node);\n    if (!inertNode)\n      return null;\n\n    inertNode.removeInertRoot(inertRoot);\n    if (inertNode.destroyed)\n      this._managedNodes.delete(node);\n\n    return inertNode;\n  }\n\n  /**\n   * Callback used when document has finished loading.\n   */\n  _onDocumentLoaded() {\n    // Find all inert roots in document and make them actually inert.\n    const inertElements = Array.from(this._document.querySelectorAll('[inert]'));\n    for (let inertElement of inertElements)\n      this.setInert(inertElement, true);\n\n    // Comment this out to use programmatic API only.\n    this._observer.observe(this._document.body, { attributes: true, subtree: true, childList: true });\n  }\n\n  /**\n   * Callback used when mutation observer detects attribute changes.\n   * @param {MutationRecord} records\n   * @param {MutationObserver} self\n   */\n  _watchForInert(records, self) {\n    for (let record of records) {\n      switch (record.type) {\n      case 'childList':\n        for (let node of Array.from(record.addedNodes)) {\n          if (node.nodeType !== Node.ELEMENT_NODE)\n            continue;\n          const inertElements = Array.from(node.querySelectorAll('[inert]'));\n          if (node.matches('[inert]'))\n            inertElements.unshift(node);\n          for (let inertElement of inertElements)\n            this.setInert(inertElement, true);\n        }\n        break;\n      case 'attributes':\n        if (record.attributeName !== 'inert')\n          continue;\n        const target = record.target;\n        const inert = target.hasAttribute('inert');\n        this.setInert(target, inert);\n        break;\n      }\n    }\n  }\n}\n\n /**\n  * Recursively walk the composed tree from |node|.\n  * @param {Node} node\n  * @param {(function (Element))=} callback Callback to be called for each element traversed,\n  *     before descending into child nodes.\n  * @param {ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n  */\nfunction composedTreeWalk(node, callback, shadowRootAncestor) {\n  if (node.nodeType == Node.ELEMENT_NODE) {\n    const element = /** @type {Element} */ (node);\n    if (callback)\n      callback(element)\n\n    // Descend into node:\n    // If it has a ShadowRoot, ignore all child elements - these will be picked\n    // up by the <content> or <shadow> elements. Descend straight into the\n    // ShadowRoot.\n    const shadowRoot = element.shadowRoot || element.webkitShadowRoot;\n    if (shadowRoot) {\n      composedTreeWalk(shadowRoot, callback, shadowRoot);\n      return;\n    }\n\n    // If it is a <content> element, descend into distributed elements - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'content') {\n      const content = /** @type {HTMLContentElement} */ (element);\n      // Verifies if ShadowDom v0 is supported.\n      const distributedNodes = content.getDistributedNodes ?\n        content.getDistributedNodes() : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n\n    // If it is a <slot> element, descend into assigned nodes - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'slot') {\n      const slot = /** @type {HTMLSlotElement} */ (element);\n      // Verify if ShadowDom v1 is supported.\n      const distributedNodes = slot.assignedNodes ?\n        slot.assignedNodes({ flatten: true }) : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n  }\n\n  // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n  // element, nor a <shadow> element recurse normally.\n  let child = node.firstChild;\n  while (child != null) {\n    composedTreeWalk(child, callback, shadowRootAncestor);\n    child = child.nextSibling;\n  }\n}\n\n/**\n * Adds a style element to the node containing the inert specific styles\n * @param {Node} node\n */\nfunction addInertStyle(node) {\n  if (node.querySelector('style#inert-style')) {\n    return;\n  }\n  const style = document.createElement('style');\n  style.setAttribute('id', 'inert-style');\n  style.textContent = \"\\n\"+\n                      \"[inert] {\\n\" +\n                      \"  pointer-events: none;\\n\" +\n                      \"  cursor: default;\\n\" +\n                      \"}\\n\" +\n                      \"\\n\" +\n                      \"[inert], [inert] * {\\n\" +\n                      \"  user-select: none;\\n\" +\n                      \"  -webkit-user-select: none;\\n\" +\n                      \"  -moz-user-select: none;\\n\" +\n                      \"  -ms-user-select: none;\\n\" +\n                      \"}\\n\";\n  node.appendChild(style);\n}\n\nconst inertManager = new InertManager(document);\n\nObject.defineProperty(Element.prototype, 'inert', {\n                        enumerable: true,\n                        get: function() { return this.hasAttribute('inert'); },\n                        set: function(inert) { inertManager.setInert(this, inert) }\n                      });\n\n})(document);\n"],"sourceRoot":"/source/"}